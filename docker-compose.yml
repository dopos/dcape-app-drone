version: '2.1'

services:

  drone-server:
    image: ${IMAGE}:${IMAGE_VER}
    restart: always
    networks:
      - lan
    labels:
      - "traefik.enable=true"
      - "traefik.port=8000"
      - "traefik.frontend.rule=Host:${APP_SITE}"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DRONE_OPEN=true
      - DRONE_HOST=${APP_SITE}

      - DRONE_GITEA=true
      - DRONE_GITEA_URL=${DRONE_GIT_PROTO}://${DRONE_GIT_HOST}/

       # not required auth for public repos
      - DRONE_GITEA_PRIVATE_MODE=true

      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_ADMIN=${DRONE_ADMIN}

      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgresql://${DB_USER}:${DB_PASS}@db:5432/${DB_USER}?sslmode=disable

  drone:
    image: ${IMAGE}:${IMAGE_VER}
    command: agent
    restart: always
    depends_on:
      - drone-server
    networks:
      - lan
    labels:
      - "traefik.enable=false"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_HOST=drone-server
      - DRONE_SERVER=ws://drone-server:8000/ws/broker
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_GITEA=true
      - DRONE_GITEA_URL=${DRONE_GIT_PROTO}://${DRONE_GIT_HOST}/
      - DRONE_GITEA_PRIVATE_MODE=true

      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgresql://${DB_USER}:${DB_PASS}@db:5432/${DB_USER}?sslmode=disable

networks:
  lan:
    external:
      name: ${DCAPE_NET}

